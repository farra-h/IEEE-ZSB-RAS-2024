
MC2_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000056e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a2  008000a2  00000644  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6c  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085e  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000841  00000000  00000000  00001e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000856  00000000  00000000  00002d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3a       	cpi	r26, 0xA3	; 163
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 02 	call	0x44a	; 0x44a <main>
  8a:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enumSetPinDirection>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_enumSetPinDirection+0x6>
  96:	7b c0       	rjmp	.+246    	; 0x18e <DIO_enumSetPinDirection+0xfc>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_enumSetPinDirection+0xc>
  9c:	7a c0       	rjmp	.+244    	; 0x192 <DIO_enumSetPinDirection+0x100>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
  9e:	41 30       	cpi	r20, 0x01	; 1
  a0:	c1 f5       	brne	.+112    	; 0x112 <DIO_enumSetPinDirection+0x80>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	91 f0       	breq	.+36     	; 0xca <DIO_enumSetPinDirection+0x38>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <DIO_enumSetPinDirection+0x20>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	d9 f0       	breq	.+54     	; 0xe2 <DIO_enumSetPinDirection+0x50>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	29 f1       	breq	.+74     	; 0xfa <DIO_enumSetPinDirection+0x68>
  b0:	72 c0       	rjmp	.+228    	; 0x196 <DIO_enumSetPinDirection+0x104>
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_enumSetPinDirection+0x2c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_enumSetPinDirection+0x28>
  c2:	82 2b       	or	r24, r18
  c4:	8a bb       	out	0x1a, r24	; 26
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  c6:	81 e0       	ldi	r24, 0x01	; 1
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
  c8:	08 95       	ret
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_enumSetPinDirection+0x44>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_enumSetPinDirection+0x40>
  da:	82 2b       	or	r24, r18
  dc:	87 bb       	out	0x17, r24	; 23
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  de:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
  e0:	08 95       	ret
				case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
  e2:	24 b3       	in	r18, 0x14	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_enumSetPinDirection+0x5c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_enumSetPinDirection+0x58>
  f2:	82 2b       	or	r24, r18
  f4:	84 bb       	out	0x14, r24	; 20
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  f6:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
  f8:	08 95       	ret
				case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
  fa:	21 b3       	in	r18, 0x11	; 17
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_enumSetPinDirection+0x74>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_enumSetPinDirection+0x70>
 10a:	82 2b       	or	r24, r18
 10c:	81 bb       	out	0x11, r24	; 17
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 10e:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
				case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
 110:	08 95       	ret
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
 112:	41 11       	cpse	r20, r1
 114:	42 c0       	rjmp	.+132    	; 0x19a <DIO_enumSetPinDirection+0x108>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	99 f0       	breq	.+38     	; 0x140 <DIO_enumSetPinDirection+0xae>
 11a:	28 f0       	brcs	.+10     	; 0x126 <DIO_enumSetPinDirection+0x94>
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	e9 f0       	breq	.+58     	; 0x15a <DIO_enumSetPinDirection+0xc8>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	41 f1       	breq	.+80     	; 0x174 <DIO_enumSetPinDirection+0xe2>
 124:	3c c0       	rjmp	.+120    	; 0x19e <DIO_enumSetPinDirection+0x10c>
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
 126:	2a b3       	in	r18, 0x1a	; 26
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_enumSetPinDirection+0xa0>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_enumSetPinDirection+0x9c>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 13c:	81 e0       	ldi	r24, 0x01	; 1
		else if ( Copy_u8Direction == DIO_PIN_INPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
 13e:	08 95       	ret
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enumSetPinDirection+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enumSetPinDirection+0xb6>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	87 bb       	out	0x17, r24	; 23
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 156:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
 158:	08 95       	ret
				case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
 15a:	24 b3       	in	r18, 0x14	; 20
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_enumSetPinDirection+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_enumSetPinDirection+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	84 bb       	out	0x14, r24	; 20
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 170:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
 172:	08 95       	ret
				case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_enumSetPinDirection+0xee>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_enumSetPinDirection+0xea>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	81 bb       	out	0x11, r24	; 17
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 18a:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
				case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
 18c:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 19e:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
 1a0:	08 95       	ret

000001a2 <DIO_enumSetPinValue>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <DIO_enumSetPinValue+0x6>
 1a6:	7b c0       	rjmp	.+246    	; 0x29e <DIO_enumSetPinValue+0xfc>
 1a8:	68 30       	cpi	r22, 0x08	; 8
 1aa:	08 f0       	brcs	.+2      	; 0x1ae <DIO_enumSetPinValue+0xc>
 1ac:	7a c0       	rjmp	.+244    	; 0x2a2 <DIO_enumSetPinValue+0x100>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	c1 f5       	brne	.+112    	; 0x222 <DIO_enumSetPinValue+0x80>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 f0       	breq	.+36     	; 0x1da <DIO_enumSetPinValue+0x38>
 1b6:	28 f0       	brcs	.+10     	; 0x1c2 <DIO_enumSetPinValue+0x20>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	d9 f0       	breq	.+54     	; 0x1f2 <DIO_enumSetPinValue+0x50>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	29 f1       	breq	.+74     	; 0x20a <DIO_enumSetPinValue+0x68>
 1c0:	72 c0       	rjmp	.+228    	; 0x2a6 <DIO_enumSetPinValue+0x104>
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
 1c2:	2b b3       	in	r18, 0x1b	; 27
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_enumSetPinValue+0x2c>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_enumSetPinValue+0x28>
 1d2:	82 2b       	or	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
 1d8:	08 95       	ret
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
 1da:	28 b3       	in	r18, 0x18	; 24
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_enumSetPinValue+0x44>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_enumSetPinValue+0x40>
 1ea:	82 2b       	or	r24, r18
 1ec:	88 bb       	out	0x18, r24	; 24
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
 1f0:	08 95       	ret
				case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_enumSetPinValue+0x5c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_enumSetPinValue+0x58>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 206:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
 208:	08 95       	ret
				case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_enumSetPinValue+0x74>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_enumSetPinValue+0x70>
 21a:	82 2b       	or	r24, r18
 21c:	82 bb       	out	0x12, r24	; 18
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 21e:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
				case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
 220:	08 95       	ret
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
 222:	41 11       	cpse	r20, r1
 224:	42 c0       	rjmp	.+132    	; 0x2aa <DIO_enumSetPinValue+0x108>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	99 f0       	breq	.+38     	; 0x250 <DIO_enumSetPinValue+0xae>
 22a:	28 f0       	brcs	.+10     	; 0x236 <DIO_enumSetPinValue+0x94>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	e9 f0       	breq	.+58     	; 0x26a <DIO_enumSetPinValue+0xc8>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	41 f1       	breq	.+80     	; 0x284 <DIO_enumSetPinValue+0xe2>
 234:	3c c0       	rjmp	.+120    	; 0x2ae <DIO_enumSetPinValue+0x10c>
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_enumSetPinValue+0xa0>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_enumSetPinValue+0x9c>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	8b bb       	out	0x1b, r24	; 27
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 24c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Copy_u8Value == DIO_PIN_LOW)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
 24e:	08 95       	ret
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_enumSetPinValue+0xba>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_enumSetPinValue+0xb6>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	88 bb       	out	0x18, r24	; 24
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 266:	81 e0       	ldi	r24, 0x01	; 1
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
 268:	08 95       	ret
				case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
 26a:	25 b3       	in	r18, 0x15	; 21
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_enumSetPinValue+0xd4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_enumSetPinValue+0xd0>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	85 bb       	out	0x15, r24	; 21
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 280:	81 e0       	ldi	r24, 0x01	; 1
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
 282:	08 95       	ret
				case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_enumSetPinValue+0xee>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_enumSetPinValue+0xea>
 294:	80 95       	com	r24
 296:	82 23       	and	r24, r18
 298:	82 bb       	out	0x12, r24	; 18
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 29a:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
				case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
 29c:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
 2b0:	08 95       	ret

000002b2 <LED_voidInit>:

#include "LED_interface.h"


void LED_voidInit( LED_Type LED_Configuration )
{
 2b2:	86 2f       	mov	r24, r22
 2b4:	67 2f       	mov	r22, r23
	
	DIO_enumSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
 2bc:	08 95       	ret

000002be <LED_voidOn>:
	
}


void LED_voidOn  ( LED_Type LED_Configuration )
{
 2be:	96 2f       	mov	r25, r22
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <LED_voidOn+0x12>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	67 2f       	mov	r22, r23
 2c8:	89 2f       	mov	r24, r25
 2ca:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_enumSetPinValue>
 2ce:	08 95       	ret
		
		}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
 2d0:	81 11       	cpse	r24, r1
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <LED_voidOn+0x20>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	67 2f       	mov	r22, r23
 2d8:	89 2f       	mov	r24, r25
 2da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_enumSetPinValue>
 2de:	08 95       	ret

000002e0 <LED_voidOff>:
	
}


void LED_voidOff ( LED_Type LED_Configuration )
{
 2e0:	96 2f       	mov	r25, r22
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <LED_voidOff+0x12>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	67 2f       	mov	r22, r23
 2ea:	89 2f       	mov	r24, r25
 2ec:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_enumSetPinValue>
 2f0:	08 95       	ret
		
		}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
 2f2:	81 11       	cpse	r24, r1
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <LED_voidOff+0x20>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	67 2f       	mov	r22, r23
 2fa:	89 2f       	mov	r24, r25
 2fc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_enumSetPinValue>
 300:	08 95       	ret

00000302 <executeCommand>:
		}
    }
}

void executeCommand(const char *command)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
	if (strcmp(command, "allon") == 0) 
 308:	69 e6       	ldi	r22, 0x69	; 105
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 310:	89 2b       	or	r24, r25
 312:	c9 f4       	brne	.+50     	; 0x346 <executeCommand+0x44>
	{
		LED_voidOn(led0);
 314:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <led0>
 318:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <led0+0x1>
 31c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led0+0x2>
 320:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_voidOn>
		LED_voidOn(led1);
 324:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <led1>
 328:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <led1+0x1>
 32c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led1+0x2>
 330:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_voidOn>
		LED_voidOn(led2);		} 
 334:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 338:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 33c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
 340:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_voidOn>
 344:	7f c0       	rjmp	.+254    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	else if (strcmp(command, "alloff") == 0) 
 346:	6f e6       	ldi	r22, 0x6F	; 111
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 350:	89 2b       	or	r24, r25
 352:	c9 f4       	brne	.+50     	; 0x386 <executeCommand+0x84>
		{
		LED_voidOff(led0);
 354:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <led0>
 358:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <led0+0x1>
 35c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led0+0x2>
 360:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_voidOff>
		LED_voidOff(led1);
 364:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <led1>
 368:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <led1+0x1>
 36c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led1+0x2>
 370:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_voidOff>
		LED_voidOff(led2);		} 
 374:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 378:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 37c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
 380:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_voidOff>
 384:	5f c0       	rjmp	.+190    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	else if (strcmp(command, "oneon") == 0) 
 386:	66 e7       	ldi	r22, 0x76	; 118
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	ce 01       	movw	r24, r28
 38c:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 390:	89 2b       	or	r24, r25
 392:	49 f4       	brne	.+18     	; 0x3a6 <executeCommand+0xa4>
	{
		LED_voidOn(led0);		
 394:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <led0>
 398:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <led0+0x1>
 39c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led0+0x2>
 3a0:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_voidOn>
 3a4:	4f c0       	rjmp	.+158    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	} 
	else if (strcmp(command, "oneoff") == 0) 
 3a6:	6c e7       	ldi	r22, 0x7C	; 124
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	ce 01       	movw	r24, r28
 3ac:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 3b0:	89 2b       	or	r24, r25
 3b2:	49 f4       	brne	.+18     	; 0x3c6 <executeCommand+0xc4>
	{
		LED_voidOff(led0);
 3b4:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <led0>
 3b8:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <led0+0x1>
 3bc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led0+0x2>
 3c0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_voidOff>
 3c4:	3f c0       	rjmp	.+126    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	} 
	else if (strcmp(command, "twoon") == 0) 
 3c6:	63 e8       	ldi	r22, 0x83	; 131
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	ce 01       	movw	r24, r28
 3cc:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 3d0:	89 2b       	or	r24, r25
 3d2:	49 f4       	brne	.+18     	; 0x3e6 <executeCommand+0xe4>
	{
		LED_voidOn(led1);
 3d4:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <led1>
 3d8:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <led1+0x1>
 3dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led1+0x2>
 3e0:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_voidOn>
 3e4:	2f c0       	rjmp	.+94     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	} 
	else if (strcmp(command, "twooff") == 0) 
 3e6:	69 e8       	ldi	r22, 0x89	; 137
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 3f0:	89 2b       	or	r24, r25
 3f2:	49 f4       	brne	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		LED_voidOff(led1);
 3f4:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <led1>
 3f8:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <led1+0x1>
 3fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led1+0x2>
 400:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_voidOff>
 404:	1f c0       	rjmp	.+62     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	} 
	else if (strcmp(command, "threeon") == 0) 
 406:	60 e9       	ldi	r22, 0x90	; 144
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	ce 01       	movw	r24, r28
 40c:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 410:	89 2b       	or	r24, r25
 412:	49 f4       	brne	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		LED_voidOn(led2);
 414:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 418:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 41c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
 420:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_voidOn>
 424:	0f c0       	rjmp	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	}
		else if (strcmp(command, "threeoff") == 0) 
 426:	68 e9       	ldi	r22, 0x98	; 152
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	ce 01       	movw	r24, r28
 42c:	0e 94 ac 02 	call	0x558	; 0x558 <strcmp>
 430:	89 2b       	or	r24, r25
 432:	41 f4       	brne	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	{
		LED_voidOff(led2);
 434:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 438:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 43c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
 440:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_voidOff>
	}	
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <main>:
LED_Type led1 = {LED_PORTA, LED_PIN1, ACTIVE_HIGH};
LED_Type led2 = {LED_PORTA, LED_PIN2, ACTIVE_HIGH};


int main(void)
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	2b 97       	sbiw	r28, 0x0b	; 11
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
	LED_voidInit(led0);
 45e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <led0>
 462:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <led0+0x1>
 466:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <led0+0x2>
 46a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_voidInit>
	LED_voidInit(led1);
 46e:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <led1>
 472:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <led1+0x1>
 476:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <led1+0x2>
 47a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_voidInit>
	LED_voidInit(led2);
 47e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 482:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__data_start+0x1>
 486:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_start+0x2>
 48a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LED_voidInit>
		
	USART_voidInit();
 48e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <USART_voidInit>
	
	char buffer[BUFFER_SIZE];
	u8 index=0;
 492:	10 e0       	ldi	r17, 0x00	; 0
			else
			{
				buffer[index++] = receivedData;
				if (index >= BUFFER_SIZE)
				{
					index = 0;
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	01 c0       	rjmp	.+2      	; 0x49a <main+0x50>
				executeCommand(buffer);
				index = 0;
			}
			else
			{
				buffer[index++] = receivedData;
 498:	19 2f       	mov	r17, r25
	u8 index=0;
    u8 receivedData;
	
    while (1) 
    {
		if (USART_u8RecevieData(&receivedData) == OK)
 49a:	ce 01       	movw	r24, r28
 49c:	0b 96       	adiw	r24, 0x0b	; 11
 49e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <USART_u8RecevieData>
 4a2:	81 11       	cpse	r24, r1
 4a4:	fa cf       	rjmp	.-12     	; 0x49a <main+0x50>
		{
			if (receivedData == '\r')
 4a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4a8:	8d 30       	cpi	r24, 0x0D	; 13
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <main+0x7c>
			{
				buffer[index] = '\0';
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	e1 0f       	add	r30, r17
 4b6:	f1 1d       	adc	r31, r1
 4b8:	10 82       	st	Z, r1
				executeCommand(buffer);
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	0e 94 81 01 	call	0x302	; 0x302 <executeCommand>
				index = 0;
 4c2:	10 2f       	mov	r17, r16
 4c4:	ea cf       	rjmp	.-44     	; 0x49a <main+0x50>
			}
			else
			{
				buffer[index++] = receivedData;
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	91 0f       	add	r25, r17
 4ca:	e1 e0       	ldi	r30, 0x01	; 1
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	e1 0f       	add	r30, r17
 4d4:	f1 1d       	adc	r31, r1
 4d6:	80 83       	st	Z, r24
				if (index >= BUFFER_SIZE)
 4d8:	9a 30       	cpi	r25, 0x0A	; 10
 4da:	f0 f2       	brcs	.-68     	; 0x498 <main+0x4e>
				{
					index = 0;
 4dc:	10 2f       	mov	r17, r16
 4de:	dd cf       	rjmp	.-70     	; 0x49a <main+0x50>

000004e0 <USART_voidInit>:
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
	}
	return Local_u8ErrorState ;
}
 4e0:	10 bc       	out	0x20, r1	; 32
 4e2:	83 e3       	ldi	r24, 0x33	; 51
 4e4:	89 b9       	out	0x09, r24	; 9
 4e6:	59 98       	cbi	0x0b, 1	; 11
 4e8:	58 98       	cbi	0x0b, 0	; 11
 4ea:	52 98       	cbi	0x0a, 2	; 10
 4ec:	86 e8       	ldi	r24, 0x86	; 134
 4ee:	80 bd       	out	0x20, r24	; 32
 4f0:	57 98       	cbi	0x0a, 7	; 10
 4f2:	56 98       	cbi	0x0a, 6	; 10
 4f4:	55 98       	cbi	0x0a, 5	; 10
 4f6:	54 9a       	sbi	0x0a, 4	; 10
 4f8:	53 9a       	sbi	0x0a, 3	; 10
 4fa:	08 95       	ret

000004fc <USART_u8RecevieData>:

u8 USART_u8RecevieData (u8 * Copy_u8ReceviedData)
{
	u8 Local_u8ErrorState = OK ;
	u32 Local_u32TimeoutCounter = 0 ;
	if (Copy_u8ReceviedData != NULL)
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	41 f1       	breq	.+80     	; 0x550 <USART_u8RecevieData+0x54>
	{
		if (USART_u8State == IDLE)
 500:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <__data_end>
 504:	21 11       	cpse	r18, r1
 506:	26 c0       	rjmp	.+76     	; 0x554 <USART_u8RecevieData+0x58>
		{
			USART_u8State = BUSY ;
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__data_end>

			/*Wait until a receive complete*/
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
 50e:	5f 99       	sbic	0x0b, 7	; 11
 510:	16 c0       	rjmp	.+44     	; 0x53e <USART_u8RecevieData+0x42>
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	ba 01       	movw	r22, r20
			{
				Local_u32TimeoutCounter++ ;
 518:	4f 5f       	subi	r20, 0xFF	; 255
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	6f 4f       	sbci	r22, 0xFF	; 255
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
		if (USART_u8State == IDLE)
		{
			USART_u8State = BUSY ;

			/*Wait until a receive complete*/
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
 520:	5f 99       	sbic	0x0b, 7	; 11
 522:	08 c0       	rjmp	.+16     	; 0x534 <USART_u8RecevieData+0x38>
 524:	40 31       	cpi	r20, 0x10	; 16
 526:	27 e2       	ldi	r18, 0x27	; 39
 528:	52 07       	cpc	r21, r18
 52a:	61 05       	cpc	r22, r1
 52c:	71 05       	cpc	r23, r1
 52e:	a1 f7       	brne	.-24     	; 0x518 <USART_u8RecevieData+0x1c>
				Local_u32TimeoutCounter++ ;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
			{
				Local_u8ErrorState = TIMEOUT_STATE ;
 530:	84 e0       	ldi	r24, 0x04	; 4
 532:	0b c0       	rjmp	.+22     	; 0x54a <USART_u8RecevieData+0x4e>
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
 534:	40 31       	cpi	r20, 0x10	; 16
 536:	57 42       	sbci	r21, 0x27	; 39
 538:	61 05       	cpc	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	29 f0       	breq	.+10     	; 0x548 <USART_u8RecevieData+0x4c>
			{
				Local_u8ErrorState = TIMEOUT_STATE ;
			}
			else
			{
				* Copy_u8ReceviedData = UDR ;
 53e:	2c b1       	in	r18, 0x0c	; 12
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
	return Local_u8ErrorState ;
}

u8 USART_u8RecevieData (u8 * Copy_u8ReceviedData)
{
	u8 Local_u8ErrorState = OK ;
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	01 c0       	rjmp	.+2      	; 0x54a <USART_u8RecevieData+0x4e>
				Local_u32TimeoutCounter++ ;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
			{
				Local_u8ErrorState = TIMEOUT_STATE ;
 548:	84 e0       	ldi	r24, 0x04	; 4
			else
			{
				* Copy_u8ReceviedData = UDR ;
			}

			USART_u8State = IDLE ;
 54a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end>
 54e:	08 95       	ret
			Local_u8ErrorState = BUSY_STATE ;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	08 95       	ret

			USART_u8State = IDLE ;
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
 554:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_u8ErrorState = NULL_POINTER ;
	}

	return Local_u8ErrorState ;
}
 556:	08 95       	ret

00000558 <strcmp>:
 558:	fb 01       	movw	r30, r22
 55a:	dc 01       	movw	r26, r24
 55c:	8d 91       	ld	r24, X+
 55e:	01 90       	ld	r0, Z+
 560:	80 19       	sub	r24, r0
 562:	01 10       	cpse	r0, r1
 564:	d9 f3       	breq	.-10     	; 0x55c <strcmp+0x4>
 566:	99 0b       	sbc	r25, r25
 568:	08 95       	ret

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
