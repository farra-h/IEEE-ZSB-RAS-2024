
task11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000920  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001335  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000862  00000000  00000000  00001d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f1  00000000  00000000  000025d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049e  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b34  00000000  00000000  00003572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000040a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d7 01 	call	0x3ae	; 0x3ae <main>
  64:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enumSetPinDirection>:
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_enumSetPinDirection+0x6>
  70:	7b c0       	rjmp	.+246    	; 0x168 <DIO_enumSetPinDirection+0xfc>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_enumSetPinDirection+0xc>
  76:	7a c0       	rjmp	.+244    	; 0x16c <DIO_enumSetPinDirection+0x100>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
  78:	41 30       	cpi	r20, 0x01	; 1
  7a:	c1 f5       	brne	.+112    	; 0xec <DIO_enumSetPinDirection+0x80>
		{
			switch (Copy_u8PORT)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	91 f0       	breq	.+36     	; 0xa4 <DIO_enumSetPinDirection+0x38>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_enumSetPinDirection+0x20>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	d9 f0       	breq	.+54     	; 0xbc <DIO_enumSetPinDirection+0x50>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	29 f1       	breq	.+74     	; 0xd4 <DIO_enumSetPinDirection+0x68>
  8a:	72 c0       	rjmp	.+228    	; 0x170 <DIO_enumSetPinDirection+0x104>
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
  8c:	2a b3       	in	r18, 0x1a	; 26
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_enumSetPinDirection+0x2c>
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	6a 95       	dec	r22
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_enumSetPinDirection+0x28>
  9c:	82 2b       	or	r24, r18
  9e:	8a bb       	out	0x1a, r24	; 26
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  a0:	81 e0       	ldi	r24, 0x01	; 1
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
  a2:	08 95       	ret
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
  a4:	27 b3       	in	r18, 0x17	; 23
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_enumSetPinDirection+0x44>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_enumSetPinDirection+0x40>
  b4:	82 2b       	or	r24, r18
  b6:	87 bb       	out	0x17, r24	; 23
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  b8:	81 e0       	ldi	r24, 0x01	; 1
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
  ba:	08 95       	ret
				case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
  bc:	24 b3       	in	r18, 0x14	; 20
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_enumSetPinDirection+0x5c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_enumSetPinDirection+0x58>
  cc:	82 2b       	or	r24, r18
  ce:	84 bb       	out	0x14, r24	; 20
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  d0:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
  d2:	08 95       	ret
				case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_enumSetPinDirection+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_enumSetPinDirection+0x70>
  e4:	82 2b       	or	r24, r18
  e6:	81 bb       	out	0x11, r24	; 17
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  e8:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
				case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
  ea:	08 95       	ret
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
  ec:	41 11       	cpse	r20, r1
  ee:	42 c0       	rjmp	.+132    	; 0x174 <DIO_enumSetPinDirection+0x108>
		{
			switch (Copy_u8PORT)
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	99 f0       	breq	.+38     	; 0x11a <DIO_enumSetPinDirection+0xae>
  f4:	28 f0       	brcs	.+10     	; 0x100 <DIO_enumSetPinDirection+0x94>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	e9 f0       	breq	.+58     	; 0x134 <DIO_enumSetPinDirection+0xc8>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	41 f1       	breq	.+80     	; 0x14e <DIO_enumSetPinDirection+0xe2>
  fe:	3c c0       	rjmp	.+120    	; 0x178 <DIO_enumSetPinDirection+0x10c>
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
 100:	2a b3       	in	r18, 0x1a	; 26
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_enumSetPinDirection+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_enumSetPinDirection+0x9c>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 116:	81 e0       	ldi	r24, 0x01	; 1

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
 118:	08 95       	ret
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_enumSetPinDirection+0xba>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_enumSetPinDirection+0xb6>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 130:	81 e0       	ldi	r24, 0x01	; 1
		else if ( Copy_u8Direction == DIO_PIN_INPUT )
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
 132:	08 95       	ret
				case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_enumSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_enumSetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 14a:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
 14c:	08 95       	ret
				case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_enumSetPinDirection+0xee>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_enumSetPinDirection+0xea>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 164:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
				case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
 166:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
#include "DIO_private.h"

DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 178:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
 17a:	08 95       	ret

0000017c <DIO_enumSetPinValue>:
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	08 f0       	brcs	.+2      	; 0x182 <DIO_enumSetPinValue+0x6>
 180:	7b c0       	rjmp	.+246    	; 0x278 <DIO_enumSetPinValue+0xfc>
 182:	68 30       	cpi	r22, 0x08	; 8
 184:	08 f0       	brcs	.+2      	; 0x188 <DIO_enumSetPinValue+0xc>
 186:	7a c0       	rjmp	.+244    	; 0x27c <DIO_enumSetPinValue+0x100>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	c1 f5       	brne	.+112    	; 0x1fc <DIO_enumSetPinValue+0x80>
		{
			switch (Copy_u8PORT)
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	91 f0       	breq	.+36     	; 0x1b4 <DIO_enumSetPinValue+0x38>
 190:	28 f0       	brcs	.+10     	; 0x19c <DIO_enumSetPinValue+0x20>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	d9 f0       	breq	.+54     	; 0x1cc <DIO_enumSetPinValue+0x50>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	29 f1       	breq	.+74     	; 0x1e4 <DIO_enumSetPinValue+0x68>
 19a:	72 c0       	rjmp	.+228    	; 0x280 <DIO_enumSetPinValue+0x104>
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_enumSetPinValue+0x2c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_enumSetPinValue+0x28>
 1ac:	82 2b       	or	r24, r18
 1ae:	8b bb       	out	0x1b, r24	; 27
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
 1b2:	08 95       	ret
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_enumSetPinValue+0x44>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_enumSetPinValue+0x40>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
 1ca:	08 95       	ret
				case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_enumSetPinValue+0x5c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_enumSetPinValue+0x58>
 1dc:	82 2b       	or	r24, r18
 1de:	85 bb       	out	0x15, r24	; 21
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
 1e2:	08 95       	ret
				case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
 1e4:	22 b3       	in	r18, 0x12	; 18
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_enumSetPinValue+0x74>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_enumSetPinValue+0x70>
 1f4:	82 2b       	or	r24, r18
 1f6:	82 bb       	out	0x12, r24	; 18
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
				case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
 1fa:	08 95       	ret
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
 1fc:	41 11       	cpse	r20, r1
 1fe:	42 c0       	rjmp	.+132    	; 0x284 <DIO_enumSetPinValue+0x108>
		{
			switch (Copy_u8PORT)
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	99 f0       	breq	.+38     	; 0x22a <DIO_enumSetPinValue+0xae>
 204:	28 f0       	brcs	.+10     	; 0x210 <DIO_enumSetPinValue+0x94>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	e9 f0       	breq	.+58     	; 0x244 <DIO_enumSetPinValue+0xc8>
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	41 f1       	breq	.+80     	; 0x25e <DIO_enumSetPinValue+0xe2>
 20e:	3c c0       	rjmp	.+120    	; 0x288 <DIO_enumSetPinValue+0x10c>
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_enumSetPinValue+0xa0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_enumSetPinValue+0x9c>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	8b bb       	out	0x1b, r24	; 27
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 226:	81 e0       	ldi	r24, 0x01	; 1

		else if (Copy_u8Value == DIO_PIN_LOW)
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
 228:	08 95       	ret
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_enumSetPinValue+0xba>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_enumSetPinValue+0xb6>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 240:	81 e0       	ldi	r24, 0x01	; 1
		else if (Copy_u8Value == DIO_PIN_LOW)
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
 242:	08 95       	ret
				case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
 244:	25 b3       	in	r18, 0x15	; 21
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_enumSetPinValue+0xd4>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_enumSetPinValue+0xd0>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 25a:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
 25c:	08 95       	ret
				case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
 25e:	22 b3       	in	r18, 0x12	; 18
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_enumSetPinValue+0xee>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_enumSetPinValue+0xea>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 274:	81 e0       	ldi	r24, 0x01	; 1
			switch (Copy_u8PORT)
			{
				case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
				case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
				case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
				case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
 276:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret
}

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 288:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
 28a:	08 95       	ret

0000028c <DIO_enumGetPinValue>:
DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	08 f0       	brcs	.+2      	; 0x292 <DIO_enumGetPinValue+0x6>
 290:	60 c0       	rjmp	.+192    	; 0x352 <DIO_enumGetPinValue+0xc6>
 292:	68 30       	cpi	r22, 0x08	; 8
 294:	08 f0       	brcs	.+2      	; 0x298 <DIO_enumGetPinValue+0xc>
 296:	5f c0       	rjmp	.+190    	; 0x356 <DIO_enumGetPinValue+0xca>
	{
		switch (Copy_u8PORT)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	e1 f0       	breq	.+56     	; 0x2d4 <DIO_enumGetPinValue+0x48>
 29c:	30 f0       	brcs	.+12     	; 0x2aa <DIO_enumGetPinValue+0x1e>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	71 f1       	breq	.+92     	; 0x2fe <DIO_enumGetPinValue+0x72>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DIO_enumGetPinValue+0x1c>
 2a6:	40 c0       	rjmp	.+128    	; 0x328 <DIO_enumGetPinValue+0x9c>
 2a8:	58 c0       	rjmp	.+176    	; 0x35a <DIO_enumGetPinValue+0xce>
		{
			case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
 2aa:	29 b3       	in	r18, 0x19	; 25
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	06 2e       	mov	r0, r22
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_enumGetPinValue+0x2c>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_enumGetPinValue+0x28>
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	82 23       	and	r24, r18
 2c0:	93 23       	and	r25, r19
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_enumGetPinValue+0x3c>
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_enumGetPinValue+0x38>
 2cc:	fa 01       	movw	r30, r20
 2ce:	80 83       	st	Z, r24
}

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 2d0:	81 e0       	ldi	r24, 0x01	; 1

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
 2d2:	08 95       	ret
			case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
 2d4:	26 b3       	in	r18, 0x16	; 22
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	06 2e       	mov	r0, r22
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_enumGetPinValue+0x56>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_enumGetPinValue+0x52>
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	82 23       	and	r24, r18
 2ea:	93 23       	and	r25, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_enumGetPinValue+0x66>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_enumGetPinValue+0x62>
 2f6:	fa 01       	movw	r30, r20
 2f8:	80 83       	st	Z, r24
}

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
			case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
 2fc:	08 95       	ret
			case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
 2fe:	23 b3       	in	r18, 0x13	; 19
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	06 2e       	mov	r0, r22
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_enumGetPinValue+0x80>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_enumGetPinValue+0x7c>
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	82 23       	and	r24, r18
 314:	93 23       	and	r25, r19
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_enumGetPinValue+0x90>
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_enumGetPinValue+0x8c>
 320:	fa 01       	movw	r30, r20
 322:	80 83       	st	Z, r24
}

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 324:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
			case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
			case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
 326:	08 95       	ret
			case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
 328:	20 b3       	in	r18, 0x10	; 16
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	06 2e       	mov	r0, r22
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_enumGetPinValue+0xaa>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_enumGetPinValue+0xa6>
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	82 23       	and	r24, r18
 33e:	93 23       	and	r25, r19
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_enumGetPinValue+0xba>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_enumGetPinValue+0xb6>
 34a:	fa 01       	movw	r30, r20
 34c:	80 83       	st	Z, r24
}

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 34e:	81 e0       	ldi	r24, 0x01	; 1
		switch (Copy_u8PORT)
		{
			case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
			case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
			case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
			case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
 350:	08 95       	ret
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
}

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 35a:	81 e0       	ldi	r24, 0x01	; 1
	{
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
 35c:	08 95       	ret

0000035e <LED_voidInit>:

#include "LED_interface.h"


void LED_voidInit( LED_Type LED_Configuration )
{
 35e:	86 2f       	mov	r24, r22
 360:	67 2f       	mov	r22, r23
	
	DIO_enumSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinDirection>
 368:	08 95       	ret

0000036a <LED_voidOn>:
	
}


void LED_voidOn  ( LED_Type LED_Configuration )
{
 36a:	96 2f       	mov	r25, r22
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	31 f4       	brne	.+12     	; 0x37c <LED_voidOn+0x12>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	67 2f       	mov	r22, r23
 374:	89 2f       	mov	r24, r25
 376:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_enumSetPinValue>
 37a:	08 95       	ret
		
		}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
 37c:	81 11       	cpse	r24, r1
 37e:	05 c0       	rjmp	.+10     	; 0x38a <LED_voidOn+0x20>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	67 2f       	mov	r22, r23
 384:	89 2f       	mov	r24, r25
 386:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_enumSetPinValue>
 38a:	08 95       	ret

0000038c <LED_voidOff>:
	
}


void LED_voidOff ( LED_Type LED_Configuration )
{
 38c:	96 2f       	mov	r25, r22
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	31 f4       	brne	.+12     	; 0x39e <LED_voidOff+0x12>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	67 2f       	mov	r22, r23
 396:	89 2f       	mov	r24, r25
 398:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_enumSetPinValue>
 39c:	08 95       	ret
		
		}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
 39e:	81 11       	cpse	r24, r1
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <LED_voidOff+0x20>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
 3a2:	41 e0       	ldi	r20, 0x01	; 1
 3a4:	67 2f       	mov	r22, r23
 3a6:	89 2f       	mov	r24, r25
 3a8:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_enumSetPinValue>
 3ac:	08 95       	ret

000003ae <main>:
{
	LED_Type A0 = {LED_PORTA, LED_PIN0, ACTIVE_HIGH};
	LED_Type A1 = {LED_PORTA, LED_PIN1, ACTIVE_HIGH};
	LED_Type A2 = {LED_PORTA, LED_PIN2, ACTIVE_HIGH};
	LED_Type A3 = {LED_PORTA, LED_PIN3, ACTIVE_HIGH};
	LED_Type A4 = {LED_PORTA, LED_PIN4, ACTIVE_HIGH};
 3ae:	91 2c       	mov	r9, r1
 3b0:	68 94       	set
 3b2:	22 24       	eor	r2, r2
 3b4:	22 f8       	bld	r2, 2
 3b6:	33 24       	eor	r3, r3
 3b8:	33 94       	inc	r3
	LED_Type A5 = {LED_PORTA, LED_PIN5, ACTIVE_HIGH};
 3ba:	a1 2c       	mov	r10, r1
 3bc:	0f 2e       	mov	r0, r31
 3be:	f5 e0       	ldi	r31, 0x05	; 5
 3c0:	4f 2e       	mov	r4, r31
 3c2:	f0 2d       	mov	r31, r0
 3c4:	55 24       	eor	r5, r5
 3c6:	53 94       	inc	r5
	LED_Type A6 = {LED_PORTA, LED_PIN6, ACTIVE_HIGH};
 3c8:	b1 2c       	mov	r11, r1
 3ca:	0f 2e       	mov	r0, r31
 3cc:	f6 e0       	ldi	r31, 0x06	; 6
 3ce:	6f 2e       	mov	r6, r31
 3d0:	f0 2d       	mov	r31, r0
 3d2:	77 24       	eor	r7, r7
 3d4:	73 94       	inc	r7
	LED_Type A7 = {LED_PORTA, LED_PIN7, ACTIVE_HIGH};
 3d6:	c1 2c       	mov	r12, r1
 3d8:	0f 2e       	mov	r0, r31
 3da:	f7 e0       	ldi	r31, 0x07	; 7
 3dc:	8f 2e       	mov	r8, r31
 3de:	f0 2d       	mov	r31, r0
		
	LED_Type B0 = {LED_PORTB, LED_PIN0, ACTIVE_HIGH};
 3e0:	d1 2c       	mov	r13, r1
	LED_Type C5 = {LED_PORTC, LED_PIN5, ACTIVE_HIGH};
	LED_Type C6 = {LED_PORTC, LED_PIN6, ACTIVE_HIGH};
	LED_Type C7 = {LED_PORTC, LED_PIN7, ACTIVE_HIGH};
		
	SW_Type  D4 = {SW_PORTD, SW_PIN4, SW_Int_PULL_UP};
	SW_Type  D5 = {SW_PORTD, SW_PIN5, SW_Int_PULL_UP};
 3e2:	0f 2e       	mov	r0, r31
 3e4:	f3 e0       	ldi	r31, 0x03	; 3
 3e6:	ef 2e       	mov	r14, r31
 3e8:	f0 2d       	mov	r31, r0
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f5 e0       	ldi	r31, 0x05	; 5
 3ee:	ff 2e       	mov	r15, r31
 3f0:	f0 2d       	mov	r31, r0
 3f2:	00 e0       	ldi	r16, 0x00	; 0
	SW_Type  D6 = {SW_PORTD, SW_PIN6, SW_Int_PULL_UP};
 3f4:	13 e0       	ldi	r17, 0x03	; 3
 3f6:	d6 e0       	ldi	r29, 0x06	; 6
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
	SW_Type  D7 = {SW_PORTD, SW_PIN7, SW_Int_PULL_UP};
		
	LED_voidInit(A0);
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A1);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	71 e0       	ldi	r23, 0x01	; 1
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A2);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	72 e0       	ldi	r23, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A3);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	73 e0       	ldi	r23, 0x03	; 3
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A4);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	74 e0       	ldi	r23, 0x04	; 4
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A5);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	75 e0       	ldi	r23, 0x05	; 5
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A6);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	76 e0       	ldi	r23, 0x06	; 6
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(A7);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	77 e0       	ldi	r23, 0x07	; 7
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	
	LED_voidInit(B0);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B1);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	71 e0       	ldi	r23, 0x01	; 1
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B2);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	72 e0       	ldi	r23, 0x02	; 2
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B3);
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	73 e0       	ldi	r23, 0x03	; 3
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B4);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	74 e0       	ldi	r23, 0x04	; 4
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B5);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	75 e0       	ldi	r23, 0x05	; 5
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B6);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	76 e0       	ldi	r23, 0x06	; 6
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(B7);
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	77 e0       	ldi	r23, 0x07	; 7
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	
	LED_voidInit(C0);
 49a:	62 e0       	ldi	r22, 0x02	; 2
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C1);
 4a4:	62 e0       	ldi	r22, 0x02	; 2
 4a6:	71 e0       	ldi	r23, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C2);
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	72 e0       	ldi	r23, 0x02	; 2
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C3);
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	73 e0       	ldi	r23, 0x03	; 3
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C4);
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	74 e0       	ldi	r23, 0x04	; 4
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C5);
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	75 e0       	ldi	r23, 0x05	; 5
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C6);
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	76 e0       	ldi	r23, 0x06	; 6
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	LED_voidInit(C7);
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	77 e0       	ldi	r23, 0x07	; 7
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 af 01 	call	0x35e	; 0x35e <LED_voidInit>
	
	SW_voidInit(D4);
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	74 e0       	ldi	r23, 0x04	; 4
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 24 04 	call	0x848	; 0x848 <SW_voidInit>
	SW_voidInit(D5);
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	75 e0       	ldi	r23, 0x05	; 5
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	0e 94 24 04 	call	0x848	; 0x848 <SW_voidInit>
	SW_voidInit(D6);
 4fe:	63 e0       	ldi	r22, 0x03	; 3
 500:	76 e0       	ldi	r23, 0x06	; 6
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 24 04 	call	0x848	; 0x848 <SW_voidInit>
	SW_voidInit(D7);
 508:	63 e0       	ldi	r22, 0x03	; 3
 50a:	77 e0       	ldi	r23, 0x07	; 7
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 24 04 	call	0x848	; 0x848 <SW_voidInit>
    
    while (1) 
    {
		if(SW_u8GetPressed(D6) == 1){
 512:	61 2f       	mov	r22, r17
 514:	7d 2f       	mov	r23, r29
 516:	8c 2f       	mov	r24, r28
 518:	0e 94 3a 04 	call	0x874	; 0x874 <SW_u8GetPressed>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	09 f0       	breq	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	c5 c0       	rjmp	.+394    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
			LED_voidOn(B0);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	7d 2d       	mov	r23, r13
 526:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52a:	8f e4       	ldi	r24, 0x4F	; 79
 52c:	93 ec       	ldi	r25, 0xC3	; 195
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 532:	00 c0       	rjmp	.+0      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 534:	00 00       	nop
			_delay_ms(200);
			LED_voidOn(B1);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	71 e0       	ldi	r23, 0x01	; 1
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(A4);
 540:	69 2d       	mov	r22, r9
 542:	72 2d       	mov	r23, r2
 544:	83 2d       	mov	r24, r3
 546:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B4);
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	74 e0       	ldi	r23, 0x04	; 4
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 554:	8f e4       	ldi	r24, 0x4F	; 79
 556:	93 ec       	ldi	r25, 0xC3	; 195
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55e:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A4);
 560:	69 2d       	mov	r22, r9
 562:	72 2d       	mov	r23, r2
 564:	83 2d       	mov	r24, r3
 566:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B4);
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	74 e0       	ldi	r23, 0x04	; 4
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(B2);
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	72 e0       	ldi	r23, 0x02	; 2
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(A5);
 57e:	6a 2d       	mov	r22, r10
 580:	74 2d       	mov	r23, r4
 582:	85 2d       	mov	r24, r5
 584:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B5);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	75 e0       	ldi	r23, 0x05	; 5
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 592:	8f e4       	ldi	r24, 0x4F	; 79
 594:	93 ec       	ldi	r25, 0xC3	; 195
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 59c:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A5);
 59e:	6a 2d       	mov	r22, r10
 5a0:	74 2d       	mov	r23, r4
 5a2:	85 2d       	mov	r24, r5
 5a4:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B5);
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	75 e0       	ldi	r23, 0x05	; 5
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(A6);
 5b2:	6b 2d       	mov	r22, r11
 5b4:	76 2d       	mov	r23, r6
 5b6:	87 2d       	mov	r24, r7
 5b8:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B6);
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	76 e0       	ldi	r23, 0x06	; 6
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B3);
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	73 e0       	ldi	r23, 0x03	; 3
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 5d0:	8f e4       	ldi	r24, 0x4F	; 79
 5d2:	93 ec       	ldi	r25, 0xC3	; 195
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5da:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A6);
 5dc:	6b 2d       	mov	r22, r11
 5de:	76 2d       	mov	r23, r6
 5e0:	87 2d       	mov	r24, r7
 5e2:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B6);
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	76 e0       	ldi	r23, 0x06	; 6
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B0);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	7d 2d       	mov	r23, r13
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(A7);
 5fa:	6c 2d       	mov	r22, r12
 5fc:	78 2d       	mov	r23, r8
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B7);
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	77 e0       	ldi	r23, 0x07	; 7
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(C6);
 60e:	62 e0       	ldi	r22, 0x02	; 2
 610:	76 e0       	ldi	r23, 0x06	; 6
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 618:	8f e4       	ldi	r24, 0x4F	; 79
 61a:	93 ec       	ldi	r25, 0xC3	; 195
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 620:	00 c0       	rjmp	.+0      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
 622:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A7);
 624:	6c 2d       	mov	r22, r12
 626:	78 2d       	mov	r23, r8
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B7);
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	77 e0       	ldi	r23, 0x07	; 7
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B1);
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	71 e0       	ldi	r23, 0x01	; 1
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(C5);
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	75 e0       	ldi	r23, 0x05	; 5
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(C7);
 64c:	62 e0       	ldi	r22, 0x02	; 2
 64e:	77 e0       	ldi	r23, 0x07	; 7
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 656:	8f e4       	ldi	r24, 0x4F	; 79
 658:	93 ec       	ldi	r25, 0xC3	; 195
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 660:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(C5);
 662:	62 e0       	ldi	r22, 0x02	; 2
 664:	75 e0       	ldi	r23, 0x05	; 5
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(C7);
 66c:	62 e0       	ldi	r22, 0x02	; 2
 66e:	77 e0       	ldi	r23, 0x07	; 7
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B2);
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	72 e0       	ldi	r23, 0x02	; 2
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
 680:	8f e4       	ldi	r24, 0x4F	; 79
 682:	93 ec       	ldi	r25, 0xC3	; 195
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 688:	00 c0       	rjmp	.+0      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 68a:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(B3);
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	73 e0       	ldi	r23, 0x03	; 3
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
 696:	8f e4       	ldi	r24, 0x4F	; 79
 698:	93 ec       	ldi	r25, 0xC3	; 195
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
 6a0:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(C6);
 6a2:	62 e0       	ldi	r22, 0x02	; 2
 6a4:	76 e0       	ldi	r23, 0x06	; 6
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
		}
		if (SW_u8GetPressed(D5) == 1) {
 6ac:	6e 2d       	mov	r22, r14
 6ae:	7f 2d       	mov	r23, r15
 6b0:	80 2f       	mov	r24, r16
 6b2:	0e 94 3a 04 	call	0x874	; 0x874 <SW_u8GetPressed>
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	09 f0       	breq	.+2      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6ba:	2b cf       	rjmp	.-426    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			LED_voidOn(C6);
 6bc:	62 e0       	ldi	r22, 0x02	; 2
 6be:	76 e0       	ldi	r23, 0x06	; 6
 6c0:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 6c4:	8f e4       	ldi	r24, 0x4F	; 79
 6c6:	93 ec       	ldi	r25, 0xC3	; 195
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6ce:	00 00       	nop
			_delay_ms(200);
			LED_voidOn(C5);
 6d0:	62 e0       	ldi	r22, 0x02	; 2
 6d2:	75 e0       	ldi	r23, 0x05	; 5
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(C7);
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	77 e0       	ldi	r23, 0x07	; 7
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B3);
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	73 e0       	ldi	r23, 0x03	; 3
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 6ee:	8f e4       	ldi	r24, 0x4F	; 79
 6f0:	93 ec       	ldi	r25, 0xC3	; 195
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
 6f8:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(C5);
 6fa:	62 e0       	ldi	r22, 0x02	; 2
 6fc:	75 e0       	ldi	r23, 0x05	; 5
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(C7);
 704:	62 e0       	ldi	r22, 0x02	; 2
 706:	77 e0       	ldi	r23, 0x07	; 7
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(A7);
 70e:	6c 2d       	mov	r22, r12
 710:	78 2d       	mov	r23, r8
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B7);
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	77 e0       	ldi	r23, 0x07	; 7
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B2);
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	72 e0       	ldi	r23, 0x02	; 2
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 72c:	8f e4       	ldi	r24, 0x4F	; 79
 72e:	93 ec       	ldi	r25, 0xC3	; 195
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
 734:	00 c0       	rjmp	.+0      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 736:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A7);
 738:	6c 2d       	mov	r22, r12
 73a:	78 2d       	mov	r23, r8
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B7);
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	77 e0       	ldi	r23, 0x07	; 7
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(A6);
 74c:	6b 2d       	mov	r22, r11
 74e:	76 2d       	mov	r23, r6
 750:	87 2d       	mov	r24, r7
 752:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B6);
 756:	61 e0       	ldi	r22, 0x01	; 1
 758:	76 e0       	ldi	r23, 0x06	; 6
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B1);
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	71 e0       	ldi	r23, 0x01	; 1
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 76a:	8f e4       	ldi	r24, 0x4F	; 79
 76c:	93 ec       	ldi	r25, 0xC3	; 195
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 772:	00 c0       	rjmp	.+0      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
 774:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A6);
 776:	6b 2d       	mov	r22, r11
 778:	76 2d       	mov	r23, r6
 77a:	87 2d       	mov	r24, r7
 77c:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B6);
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	76 e0       	ldi	r23, 0x06	; 6
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(C6);
 78a:	62 e0       	ldi	r22, 0x02	; 2
 78c:	76 e0       	ldi	r23, 0x06	; 6
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(A5);
 794:	6a 2d       	mov	r22, r10
 796:	74 2d       	mov	r23, r4
 798:	85 2d       	mov	r24, r5
 79a:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B5);
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	75 e0       	ldi	r23, 0x05	; 5
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B0);
 7a8:	61 e0       	ldi	r22, 0x01	; 1
 7aa:	7d 2d       	mov	r23, r13
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 7b2:	8f e4       	ldi	r24, 0x4F	; 79
 7b4:	93 ec       	ldi	r25, 0xC3	; 195
 7b6:	01 97       	sbiw	r24, 0x01	; 1
 7b8:	f1 f7       	brne	.-4      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
 7ba:	00 c0       	rjmp	.+0      	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
 7bc:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A5);
 7be:	6a 2d       	mov	r22, r10
 7c0:	74 2d       	mov	r23, r4
 7c2:	85 2d       	mov	r24, r5
 7c4:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B5);
 7c8:	61 e0       	ldi	r22, 0x01	; 1
 7ca:	75 e0       	ldi	r23, 0x05	; 5
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B3);
 7d2:	61 e0       	ldi	r22, 0x01	; 1
 7d4:	73 e0       	ldi	r23, 0x03	; 3
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOn(A4);
 7dc:	69 2d       	mov	r22, r9
 7de:	72 2d       	mov	r23, r2
 7e0:	83 2d       	mov	r24, r3
 7e2:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
			LED_voidOn(B4);
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	74 e0       	ldi	r23, 0x04	; 4
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_voidOn>
 7f0:	8f e4       	ldi	r24, 0x4F	; 79
 7f2:	93 ec       	ldi	r25, 0xC3	; 195
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
 7fa:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(A4);
 7fc:	69 2d       	mov	r22, r9
 7fe:	72 2d       	mov	r23, r2
 800:	83 2d       	mov	r24, r3
 802:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B4);
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	74 e0       	ldi	r23, 0x04	; 4
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
			LED_voidOff(B2);
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	72 e0       	ldi	r23, 0x02	; 2
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
 81a:	8f e4       	ldi	r24, 0x4F	; 79
 81c:	93 ec       	ldi	r25, 0xC3	; 195
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
 822:	00 c0       	rjmp	.+0      	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
 824:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(B1);
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	71 e0       	ldi	r23, 0x01	; 1
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
 830:	8f e4       	ldi	r24, 0x4F	; 79
 832:	93 ec       	ldi	r25, 0xC3	; 195
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
 838:	00 c0       	rjmp	.+0      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
 83a:	00 00       	nop
			_delay_ms(200);
			LED_voidOff(B0);
 83c:	61 e0       	ldi	r22, 0x01	; 1
 83e:	7d 2d       	mov	r23, r13
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_voidOff>
 846:	65 ce       	rjmp	.-822    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>

00000848 <SW_voidInit>:


#include "SW_interface.h"


void SW_voidInit      ( SW_Type SW_Config ){
 848:	1f 93       	push	r17
 84a:	cf 93       	push	r28
 84c:	df 93       	push	r29
 84e:	c6 2f       	mov	r28, r22
 850:	d7 2f       	mov	r29, r23
 852:	18 2f       	mov	r17, r24
	
	DIO_enumSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	67 2f       	mov	r22, r23
 858:	8c 2f       	mov	r24, r28
 85a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enumSetPinDirection>
	

	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
 85e:	11 11       	cpse	r17, r1
 860:	05 c0       	rjmp	.+10     	; 0x86c <__stack+0xd>
		
		DIO_enumSetPinValue    ( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
 862:	41 e0       	ldi	r20, 0x01	; 1
 864:	6d 2f       	mov	r22, r29
 866:	8c 2f       	mov	r24, r28
 868:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_enumSetPinValue>
		
	}
	
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	08 95       	ret

00000874 <SW_u8GetPressed>:

u8   SW_u8GetPressed ( SW_Type SW_Config ){
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	1f 92       	push	r1
 87a:	cd b7       	in	r28, 0x3d	; 61
 87c:	de b7       	in	r29, 0x3e	; 62
 87e:	96 2f       	mov	r25, r22
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
 880:	19 82       	std	Y+1, r1	; 0x01
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	68 f4       	brcc	.+26     	; 0x8a0 <SW_u8GetPressed+0x2c>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
 886:	ae 01       	movw	r20, r28
 888:	4f 5f       	subi	r20, 0xFF	; 255
 88a:	5f 4f       	sbci	r21, 0xFF	; 255
 88c:	67 2f       	mov	r22, r23
 88e:	89 2f       	mov	r24, r25
 890:	0e 94 46 01 	call	0x28c	; 0x28c <DIO_enumGetPinValue>
	
}

u8   SW_u8GetPressed ( SW_Type SW_Config ){
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	99 81       	ldd	r25, Y+1	; 0x01
 898:	99 23       	and	r25, r25
 89a:	91 f0       	breq	.+36     	; 0x8c0 <SW_u8GetPressed+0x4c>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	10 c0       	rjmp	.+32     	; 0x8c0 <SW_u8GetPressed+0x4c>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	69 f4       	brne	.+26     	; 0x8be <SW_u8GetPressed+0x4a>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
 8a4:	ae 01       	movw	r20, r28
 8a6:	4f 5f       	subi	r20, 0xFF	; 255
 8a8:	5f 4f       	sbci	r21, 0xFF	; 255
 8aa:	67 2f       	mov	r22, r23
 8ac:	89 2f       	mov	r24, r25
 8ae:	0e 94 46 01 	call	0x28c	; 0x28c <DIO_enumGetPinValue>
	
}

u8   SW_u8GetPressed ( SW_Type SW_Config ){
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	99 81       	ldd	r25, Y+1	; 0x01
 8b6:	91 30       	cpi	r25, 0x01	; 1
 8b8:	19 f0       	breq	.+6      	; 0x8c0 <SW_u8GetPressed+0x4c>
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <SW_u8GetPressed+0x4c>
 8be:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return LOC_u8Result ;
	
 8c0:	0f 90       	pop	r0
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
