
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800086  00800086  00000568  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001156  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084e  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000861  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000028ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086c  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000374d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  8a:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PCF8574_write>:
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	0e 94 02 02 	call	0x404	; 0x404 <TWI_start>
  9a:	0e 94 12 02 	call	0x424	; 0x424 <TWI_getStatus>
  9e:	88 30       	cpi	r24, 0x08	; 8
  a0:	91 f4       	brne	.+36     	; 0xc6 <PCF8574_write+0x34>
  a2:	80 e4       	ldi	r24, 0x40	; 64
  a4:	0e 94 0b 02 	call	0x416	; 0x416 <TWI_writeByte>
  a8:	0e 94 12 02 	call	0x424	; 0x424 <TWI_getStatus>
  ac:	88 31       	cpi	r24, 0x18	; 24
  ae:	69 f4       	brne	.+26     	; 0xca <PCF8574_write+0x38>
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 0b 02 	call	0x416	; 0x416 <TWI_writeByte>
  b6:	0e 94 12 02 	call	0x424	; 0x424 <TWI_getStatus>
  ba:	88 32       	cpi	r24, 0x28	; 40
  bc:	41 f4       	brne	.+16     	; 0xce <PCF8574_write+0x3c>
  be:	0e 94 08 02 	call	0x410	; 0x410 <TWI_stop>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	05 c0       	rjmp	.+10     	; 0xd0 <PCF8574_write+0x3e>
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <PCF8574_write+0x3e>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <PCF8574_write+0x3e>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <LCD_sendCommand>:
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
  d8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
  e2:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
  e6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
  f0:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_sendCommand+0x24>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_sendCommand+0x2a>
  fe:	00 00       	nop
 100:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 10a:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_sendCommand+0x3e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_sendCommand+0x44>
 118:	00 00       	nop
 11a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	9c 2f       	mov	r25, r28
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	89 2b       	or	r24, r25
 126:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 12a:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_sendCommand+0x5e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_sendCommand+0x64>
 138:	00 00       	nop
 13a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 144:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_sendCommand+0x78>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_sendCommand+0x7e>
 152:	00 00       	nop
 154:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 15e:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_sendCommand+0x92>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_sendCommand+0x98>
 16c:	00 00       	nop
 16e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 172:	28 2f       	mov	r18, r24
 174:	2f 70       	andi	r18, 0x0F	; 15
 176:	30 e1       	ldi	r19, 0x10	; 16
 178:	c3 9f       	mul	r28, r19
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	82 2b       	or	r24, r18
 180:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 184:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_sendCommand+0xb8>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_sendCommand+0xbe>
 192:	00 00       	nop
 194:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 198:	8b 7f       	andi	r24, 0xFB	; 251
 19a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 19e:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 1a2:	89 ef       	ldi	r24, 0xF9	; 249
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_sendCommand+0xd2>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_sendCommand+0xd8>
 1ac:	00 00       	nop
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_init>:
 1b2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <TWI_init>
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 1ce:	08 95       	ret

000001d0 <LCD_displayCharacter>:
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
 1d4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 1de:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 1e2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 1f0:	89 ef       	ldi	r24, 0xF9	; 249
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_displayCharacter+0x24>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_displayCharacter+0x2a>
 1fa:	00 00       	nop
 1fc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 200:	84 60       	ori	r24, 0x04	; 4
 202:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 206:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 20a:	89 ef       	ldi	r24, 0xF9	; 249
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_displayCharacter+0x3e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_displayCharacter+0x44>
 214:	00 00       	nop
 216:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	9c 2f       	mov	r25, r28
 21e:	90 7f       	andi	r25, 0xF0	; 240
 220:	89 2b       	or	r24, r25
 222:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 226:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 22a:	89 ef       	ldi	r24, 0xF9	; 249
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_displayCharacter+0x5e>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_displayCharacter+0x64>
 234:	00 00       	nop
 236:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 23a:	8b 7f       	andi	r24, 0xFB	; 251
 23c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 240:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 244:	89 ef       	ldi	r24, 0xF9	; 249
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_displayCharacter+0x78>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_displayCharacter+0x7e>
 24e:	00 00       	nop
 250:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 254:	84 60       	ori	r24, 0x04	; 4
 256:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 25a:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCD_displayCharacter+0x92>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_displayCharacter+0x98>
 268:	00 00       	nop
 26a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 26e:	28 2f       	mov	r18, r24
 270:	2f 70       	andi	r18, 0x0F	; 15
 272:	30 e1       	ldi	r19, 0x10	; 16
 274:	c3 9f       	mul	r28, r19
 276:	c0 01       	movw	r24, r0
 278:	11 24       	eor	r1, r1
 27a:	82 2b       	or	r24, r18
 27c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 280:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 284:	89 ef       	ldi	r24, 0xF9	; 249
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_displayCharacter+0xb8>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_displayCharacter+0xbe>
 28e:	00 00       	nop
 290:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 294:	8b 7f       	andi	r24, 0xFB	; 251
 296:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
 29a:	0e 94 49 00 	call	0x92	; 0x92 <PCF8574_write>
 29e:	89 ef       	ldi	r24, 0xF9	; 249
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_displayCharacter+0xd2>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_displayCharacter+0xd8>
 2a8:	00 00       	nop
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <LCD_displayString>:
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <LCD_displayString+0x24>
 2bc:	8f 01       	movw	r16, r30
 2be:	c0 e0       	ldi	r28, 0x00	; 0
 2c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_displayCharacter>
 2c4:	cf 5f       	subi	r28, 0xFF	; 255
 2c6:	f8 01       	movw	r30, r16
 2c8:	ec 0f       	add	r30, r28
 2ca:	f1 1d       	adc	r31, r1
 2cc:	80 81       	ld	r24, Z
 2ce:	81 11       	cpse	r24, r1
 2d0:	f7 cf       	rjmp	.-18     	; 0x2c0 <LCD_displayString+0x12>
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <LCD_moveCursor>:
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	41 f0       	breq	.+16     	; 0x2ee <LCD_moveCursor+0x14>
 2de:	28 f0       	brcs	.+10     	; 0x2ea <LCD_moveCursor+0x10>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	41 f0       	breq	.+16     	; 0x2f4 <LCD_moveCursor+0x1a>
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	49 f0       	breq	.+18     	; 0x2fa <LCD_moveCursor+0x20>
 2e8:	0a c0       	rjmp	.+20     	; 0x2fe <LCD_moveCursor+0x24>
 2ea:	96 2f       	mov	r25, r22
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <LCD_moveCursor+0x24>
 2ee:	90 e4       	ldi	r25, 0x40	; 64
 2f0:	96 0f       	add	r25, r22
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <LCD_moveCursor+0x24>
 2f4:	90 e1       	ldi	r25, 0x10	; 16
 2f6:	96 0f       	add	r25, r22
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <LCD_moveCursor+0x24>
 2fa:	90 e5       	ldi	r25, 0x50	; 80
 2fc:	96 0f       	add	r25, r22
 2fe:	89 2f       	mov	r24, r25
 300:	80 68       	ori	r24, 0x80	; 128
 302:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 306:	08 95       	ret

00000308 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	60 97       	sbiw	r28, 0x10	; 16
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 31c:	4a e0       	ldi	r20, 0x0A	; 10
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	be 01       	movw	r22, r28
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	0e 94 15 02 	call	0x42a	; 0x42a <itoa>
   LCD_displayString(buff); /* Display the string */
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_displayString>
}
 332:	60 96       	adiw	r28, 0x10	; 16
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <LCD_clearScreen>:
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
 34a:	08 95       	ret

0000034c <main>:
#include "CLCD_interface.h"
#include <util/delay.h>



int main(void) {
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
	
	LCD_init();
 350:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_init>
	LCD_clearScreen();
 354:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_clearScreen>
 358:	c0 e0       	ldi	r28, 0x00	; 0
 35a:	d0 e0       	ldi	r29, 0x00	; 0
	
	uint8 counter=0;
	while(counter <= 3)
	{
		LCD_clearScreen();
 35c:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_clearScreen>
		LCD_intgerToString(counter++);
 360:	ce 01       	movw	r24, r28
 362:	0e 94 84 01 	call	0x308	; 0x308 <LCD_intgerToString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	2f e9       	ldi	r18, 0x9F	; 159
 368:	86 e8       	ldi	r24, 0x86	; 134
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x20>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x2a>
 376:	00 00       	nop
 378:	21 96       	adiw	r28, 0x01	; 1
	
	LCD_init();
	LCD_clearScreen();
	
	uint8 counter=0;
	while(counter <= 3)
 37a:	c4 30       	cpi	r28, 0x04	; 4
 37c:	d1 05       	cpc	r29, r1
 37e:	71 f7       	brne	.-36     	; 0x35c <main+0x10>
		LCD_clearScreen();
		LCD_intgerToString(counter++);
		_delay_ms(500);
	}
	
	LCD_moveCursor(0, 0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_moveCursor>
	LCD_displayString("It's the last");
 388:	80 e6       	ldi	r24, 0x60	; 96
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_displayString>
	LCD_moveCursor(1, 0);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_moveCursor>
	LCD_displayString("Task *_*");
 398:	8e e6       	ldi	r24, 0x6E	; 110
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_displayString>
 3a0:	2f e7       	ldi	r18, 0x7F	; 127
 3a2:	8a e1       	ldi	r24, 0x1A	; 26
 3a4:	96 e0       	ldi	r25, 0x06	; 6
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x5a>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x64>
 3b0:	00 00       	nop
	_delay_ms(2000);
	
	LCD_clearScreen();
 3b2:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_clearScreen>
	LCD_displayString("Finallyyy >_<");
 3b6:	87 e7       	ldi	r24, 0x77	; 119
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 57 01 	call	0x2ae	; 0x2ae <LCD_displayString>
 3be:	2f e7       	ldi	r18, 0x7F	; 127
 3c0:	8a e1       	ldi	r24, 0x1A	; 26
 3c2:	96 e0       	ldi	r25, 0x06	; 6
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x78>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x82>
 3ce:	00 00       	nop
	_delay_ms(2000);
	LCD_clearScreen();
 3d0:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_clearScreen>
 3d4:	2f e3       	ldi	r18, 0x3F	; 63
 3d6:	8d e0       	ldi	r24, 0x0D	; 13
 3d8:	93 e0       	ldi	r25, 0x03	; 3
 3da:	21 50       	subi	r18, 0x01	; 1
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	90 40       	sbci	r25, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x8e>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x98>
 3e4:	00 00       	nop
	_delay_ms(1000);
	LCD_sendCommand(LCD_CURSOR_OFF);
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 6a 00 	call	0xd4	; 0xd4 <LCD_sendCommand>
	return 0;
}
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <TWI_init>:
    TWCR = (1 << TWINT) | (1 << TWEN);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	80 b9       	out	0x00, r24	; 0
 3fa:	11 b8       	out	0x01, r1	; 1
 3fc:	82 b9       	out	0x02, r24	; 2
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	86 bf       	out	0x36, r24	; 54
 402:	08 95       	ret

00000404 <TWI_start>:
 404:	84 ea       	ldi	r24, 0xA4	; 164
 406:	86 bf       	out	0x36, r24	; 54
 408:	06 b6       	in	r0, 0x36	; 54
 40a:	07 fe       	sbrs	r0, 7
 40c:	fd cf       	rjmp	.-6      	; 0x408 <TWI_start+0x4>
 40e:	08 95       	ret

00000410 <TWI_stop>:
 410:	84 e9       	ldi	r24, 0x94	; 148
 412:	86 bf       	out	0x36, r24	; 54
 414:	08 95       	ret

00000416 <TWI_writeByte>:
 416:	83 b9       	out	0x03, r24	; 3
 418:	84 e8       	ldi	r24, 0x84	; 132
 41a:	86 bf       	out	0x36, r24	; 54
 41c:	06 b6       	in	r0, 0x36	; 54
 41e:	07 fe       	sbrs	r0, 7
 420:	fd cf       	rjmp	.-6      	; 0x41c <TWI_writeByte+0x6>
 422:	08 95       	ret

00000424 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 424:	81 b1       	in	r24, 0x01	; 1
    return status;
 426:	88 7f       	andi	r24, 0xF8	; 248
 428:	08 95       	ret

0000042a <itoa>:
 42a:	45 32       	cpi	r20, 0x25	; 37
 42c:	51 05       	cpc	r21, r1
 42e:	20 f4       	brcc	.+8      	; 0x438 <itoa+0xe>
 430:	42 30       	cpi	r20, 0x02	; 2
 432:	10 f0       	brcs	.+4      	; 0x438 <itoa+0xe>
 434:	0c 94 20 02 	jmp	0x440	; 0x440 <__itoa_ncheck>
 438:	fb 01       	movw	r30, r22
 43a:	10 82       	st	Z, r1
 43c:	cb 01       	movw	r24, r22
 43e:	08 95       	ret

00000440 <__itoa_ncheck>:
 440:	bb 27       	eor	r27, r27
 442:	4a 30       	cpi	r20, 0x0A	; 10
 444:	31 f4       	brne	.+12     	; 0x452 <__itoa_ncheck+0x12>
 446:	99 23       	and	r25, r25
 448:	22 f4       	brpl	.+8      	; 0x452 <__itoa_ncheck+0x12>
 44a:	bd e2       	ldi	r27, 0x2D	; 45
 44c:	90 95       	com	r25
 44e:	81 95       	neg	r24
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	0c 94 2c 02 	jmp	0x458	; 0x458 <__utoa_common>

00000456 <__utoa_ncheck>:
 456:	bb 27       	eor	r27, r27

00000458 <__utoa_common>:
 458:	fb 01       	movw	r30, r22
 45a:	55 27       	eor	r21, r21
 45c:	aa 27       	eor	r26, r26
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	aa 1f       	adc	r26, r26
 464:	a4 17       	cp	r26, r20
 466:	10 f0       	brcs	.+4      	; 0x46c <__utoa_common+0x14>
 468:	a4 1b       	sub	r26, r20
 46a:	83 95       	inc	r24
 46c:	50 51       	subi	r21, 0x10	; 16
 46e:	b9 f7       	brne	.-18     	; 0x45e <__utoa_common+0x6>
 470:	a0 5d       	subi	r26, 0xD0	; 208
 472:	aa 33       	cpi	r26, 0x3A	; 58
 474:	08 f0       	brcs	.+2      	; 0x478 <__utoa_common+0x20>
 476:	a9 5d       	subi	r26, 0xD9	; 217
 478:	a1 93       	st	Z+, r26
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	79 f7       	brne	.-34     	; 0x45c <__utoa_common+0x4>
 47e:	b1 11       	cpse	r27, r1
 480:	b1 93       	st	Z+, r27
 482:	11 92       	st	Z+, r1
 484:	cb 01       	movw	r24, r22
 486:	0c 94 45 02 	jmp	0x48a	; 0x48a <strrev>

0000048a <strrev>:
 48a:	dc 01       	movw	r26, r24
 48c:	fc 01       	movw	r30, r24
 48e:	67 2f       	mov	r22, r23
 490:	71 91       	ld	r23, Z+
 492:	77 23       	and	r23, r23
 494:	e1 f7       	brne	.-8      	; 0x48e <strrev+0x4>
 496:	32 97       	sbiw	r30, 0x02	; 2
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <strrev+0x18>
 49a:	7c 91       	ld	r23, X
 49c:	6d 93       	st	X+, r22
 49e:	70 83       	st	Z, r23
 4a0:	62 91       	ld	r22, -Z
 4a2:	ae 17       	cp	r26, r30
 4a4:	bf 07       	cpc	r27, r31
 4a6:	c8 f3       	brcs	.-14     	; 0x49a <strrev+0x10>
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
